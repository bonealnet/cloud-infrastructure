#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/update_bins_from_sftp" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else
	# ------------------------------------------------------------
	
	EXIT_CODE=1;

	# Make sure required runtime(s) are installed
	if [ -z "$(which dos2unix)" ]; then
		apt-get-update -y; apt-get install -y dos2unix;
	fi;
	
	DIR_REPO_BASE="";

	# Detect & handle WSL instance(s)
	WSL_CHECK_EXISTS=$(which wsl_get_windows_username);
	if [ -n "${WSL_CHECK_EXISTS}" ]; then
		WIN32_USERNAME=$(wsl_get_windows_username);
		WIN32_USER_ERRORS="$?";
	fi;
	if [ -n "${WIN32_USER_ERRORS}" ] && [ "${WIN32_USER_ERRORS}" == "0" ]; then
		#  Windows OS running WSL (Windows Subsystem for Linux) - Locate source directory from amongst Win32-Host-User's files
		WIN32_HOMEDIR=$(find /mnt/*/Users/${WIN32_USERNAME} -mindepth 0 -maxdepth 0 -type d);
		WIN32_USR_LOCAL=$(find ${WIN32_HOMEDIR}/Documents -maxdepth 10 -name 'local' -type d | grep '/cloud-infrastructure/usr/local');
		if [ ! -n "${WIN32_USR_LOCAL}" ]; then
			echo "";
			echo "Unable to locate directory matching 'cloud-infrastructure/usr/local' within win32-user's documents @ '${WIN32_USERNAME}'";
			exit 1;
		else
			DIR_REPO_USR="$(dirname ${WIN32_USR_LOCAL})";
			DIR_REPO_BASE="$(dirname ${DIR_REPO_USR})";
		fi;

	else

		WHOAMI_HOME_DIR="$(getent passwd $(id -un) | cut --delimiter=: --fields=6)";
		WHOAMI_USR_LOCAL=$(find ${WHOAMI_HOME_DIR} -maxdepth 10 -name 'local' -type d | grep '/cloud-infrastructure/usr/local');
		DIR_REPO_USR="$(dirname ${WHOAMI_USR_LOCAL})";
		DIR_REPO_BASE="$(dirname ${DIR_REPO_USR})";
		SOURCE_DIR_ERRS=$?;

		if [ "${SOURCE_DIR_ERRS}" != "0" ] && [ -n "${SUDO_USER}" ]; then
			#  Linux OS - Locate source directory from amongst Non-Sudo User's files
			SUDOER_HOME_DIR="$(getent passwd ${SUDO_USER} | cut --delimiter=: --fields=6)";
			SUDOER_USR_LOCAL=$(find ${SUDOER_HOME_DIR} -maxdepth 10 -name 'local' -type d | grep '/cloud-infrastructure/usr/local');
			DIR_REPO_USR="$(dirname ${SUDOER_USR_LOCAL})";
			DIR_REPO_BASE="$(dirname ${DIR_REPO_USR})";
			SOURCE_DIR_ERRS=$?;
		fi;
	
	fi;

	if [ -z "${DIR_REPO_BASE}" ]; then
		# Error-out if any required variable(s) are empty/unset
		EXIT_CODE=1;

		echo "";
		echo "Error - Required variable found to be empty/unset: \${DIR_REPO_BASE}";

	elif [ ! -d "${DIR_REPO_BASE}/usr/local/bin/" ] || [ ! -d "${DIR_REPO_BASE}/usr/local/sbin/" ]; then
		# Error-out if any required source directories are missing
		EXIT_CODE=1;

		if [ ! -d "${DIR_REPO_BASE}/usr/local/bin/" ]; then
			echo "";
			echo "Error - Directory not-found: [ ${DIR_REPO_BASE}/usr/local/bin/ ]";
		fi;
		if [ ! -d "${DIR_REPO_BASE}/usr/local/sbin/" ]; then
			echo "";
			echo "Error - Directory not-found: [ ${DIR_REPO_BASE}/usr/local/sbin/ ]";
		fi;

	else
		# Required source directories exist - Update local runtimes from them
		EXIT_CODE=0;

		echo "";
		echo "Copying files from '${DIR_REPO_BASE}/usr/local/bin/*' to '/usr/local/bin/.' ...";
		sudo cp --verbose --force ${DIR_REPO_BASE}/usr/local/bin/* /usr/local/bin/.;
		sudo chown "root:root" /usr/local/bin/*;
		sudo chmod 0755 /usr/local/bin/*;
		sudo dos2unix /usr/local/bin/*;

		echo "";
		echo "Copying files from '${DIR_REPO_BASE}/usr/local/sbin/*' to '/usr/local/sbin/.' ...";
		sudo cp --verbose --force ${DIR_REPO_BASE}/usr/local/sbin/* /usr/local/sbin/.;
		sudo chown "root:root" /usr/local/sbin/*;
		sudo chmod 0755 /usr/local/sbin/*;
		sudo dos2unix /usr/local/sbin/*;

		echo "";
		echo "Local bin & sbin are now synced with 'origin/master'";
		echo "";

		# ------------------------------------------------------------

		# Get list of files to Copy into Home-Dirs
		COPY_FROM_SOURCE="${DIR_REPO_BASE}/root";
		FILES_TO_COPY=$(ls -hAl "${COPY_FROM_SOURCE}/" | awk '{print $9}');

		# User-List whose Home-Dirs will be updated
		LINUX_BASH_USERS=$(cat /etc/passwd | grep /bin/bash | awk -F':' '{ print $1}');

		# Determine longest Username to enhance log-readability by left-padding output text, below
		#   NOTE: Linux usernames cannot be longer than 32 chars (according to useradd man page)
		USERNAMES_MOSTCHARS=0;
		for EACH_SSH_USER in ${LINUX_BASH_USERS}; do
			EACH_USERNAME_LENGTH=${#EACH_SSH_USER};
			if (( ${EACH_USERNAME_LENGTH} > ${USERNAMES_MOSTCHARS} )); then
				USERNAMES_MOSTCHARS=${EACH_USERNAME_LENGTH};
			fi;
		done;
		# Begin copying files to SSH-Enabled User-Home Directories
		for EACH_FILE in ${FILES_TO_COPY}; do
			if [[ ! -z "${EACH_FILE// }" ]]; then # Ignore blank/empty filenames
				echo "        ↪ \"${EACH_FILE}\" (Home-Directory File)"
				for EACH_SSH_USER in ${LINUX_BASH_USERS}; do
					EACH_PRIMARY_GROUP="$(id -gn ${EACH_SSH_USER})";
					DIR_USER_HOME="$(eval echo ~${EACH_SSH_USER})";
					# Left-pad usernames to enhance log readability
					USERNAME_RPAD="            "$(printf '%-'${USERNAMES_MOSTCHARS}'s' ↪ ${EACH_SSH_USER});
					# Only apply Home-Directory items to SSH-Enabled users
					if [ "${EACH_SSH_USER}" == "root" ] || [ -d "${DIR_USER_HOME}/.ssh" ] || [ -f "/etc/ssh/authorized_keys/${EACH_SSH_USER}" ]; then
						SRC_FULLPATH="${COPY_FROM_SOURCE}/${EACH_FILE}";
						DEST_FULLPATH="${DIR_USER_HOME}/${EACH_FILE}";
						if [ -d "${EACH_FILE}" ]; then
							# Config Directories
							cp -rf "${SRC_FULLPATH}" "${DIR_USER_HOME}";
							chown -R "${EACH_SSH_USER}:${EACH_PRIMARY_GROUP}" "${DEST_FULLPATH}";
							chmod -R 600 "${DEST_FULLPATH}";
							chmod 700 "${DEST_FULLPATH}";
						else
							# Config Files
							cp -f "${SRC_FULLPATH}" "${DEST_FULLPATH}";
							chown "${EACH_SSH_USER}:${EACH_PRIMARY_GROUP}" "${DEST_FULLPATH}";
							chmod 600 "${DEST_FULLPATH}";
						fi;
						echo "${USERNAME_RPAD} ✅  [ ${DEST_FULLPATH} ]";
					fi;
				done;
			fi;
		done;

		
	fi;

	exit ${EXIT_CODE};

fi;
