#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/add_user" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	sleep 30;
	exit 1;

elif [ -z "${USER_NAME}" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Required variable  \$USER_NAME  found to be empty/unset";
	echo "                       |";
	echo "                       |--> Example call -->$  \$USER_NAME=\"[USERNAME]\" && $(basename \"${0}\");";
	echo "";
	sleep 30;
	exit 1;

else
	# ------------------------------------------------------------
	#	   Set the username, ID, homedir, etc.
	# ------------------------------------------------------------

	# User Info
	USER_NAME="newuser";
	USER_ID="${USER_ID:-NEXT_AVAILABLE_ID}";
	USER_SHELL="${USER_SHELL:-/bin/bash}";

	# User Directory-Info
	DIR_USER_HOME="${DIR_USER_HOME:-/home/${USER_NAME}}";
	DIR_USER_SSH="${DIR_USER_SSH:-${DIR_USER_HOME}/.ssh}";
	
	CREATE_USERHOME="${CREATE_USERHOME:-1}";
	CREATE_USERSSH="${CREATE_USERSSH:-1}";

	# Primary Group Info
	GROUP_NAME="${GROUP_NAME:-${USER_NAME}}";
	GROUP_ID="${GROUP_ID:-NEXT_AVAILABLE_ID}";
	CREATE_GROUP="${CREATE_GROUP:-1}";

	# Options - Password
	SET_USER_PASSWORD="${SET_USER_PASSWORD:-0}";

	# Options - Sudo
	ADD_USER_TO_SUDOERS="${ADD_USER_TO_SUDOERS:-0}";
	SUDO_REQUIRES_PASS="${SUDO_REQUIRES_PASS:-0}";

	#	------------------------------------------------------------
	#	   Values below are based off of the above values
	# ------------------------------------------------------------

	if [ "$(id -un)" != "root" ]; then

		echo "Must run \"${0}\" as user 'root'.";
		exit 1;

	elif [ "${USER_ID}" != "NEXT_AVAILABLE_ID" ] && [ "$(id ${USER_ID} 2>/dev/null)" != "" ]; then

		echo "User ID \"${USER_ID}\" already taken, please choose another and re-run this script.";
		exit 1;

	elif [ "${CREATE_GROUP}" == "1" ] && [ "$(getent group ${GROUP_ID} 2>/dev/null)" != "" ]; then

		echo "Group ID \"${GROUP_ID}\" already taken, please choose another and re-run this script.";
		echo "If this is desired, please set \$CREATE_GROUP to \"0\" and re-run this script.";
		exit 1;

	elif [ "${CREATE_USERHOME}" == "1" ] && [ -d "${DIR_USER_HOME}" ]; then

		echo "Home Directory already exists: \"${DIR_USER_HOME}\".";
		echo "If you still want to use this directory, set \$CREATE_USERHOME to \"0\" and re-run this script.";
		exit 1;

	else


		if [ "${USER_ID}" == "NEXT_AVAILABLE_ID" ] && [ "${GROUP_ID}" == "NEXT_AVAILABLE_ID" ]; then
			if [ "${CREATE_GROUP}" == "1" ]; then groupadd "${GROUP_NAME}" 2> "/dev/null"; fi;
			useradd --create-home --home-dir "${DIR_USER_HOME}" --shell "${USER_SHELL}" "${USER_NAME}";

		elif [ "${USER_ID}" != "NEXT_AVAILABLE_ID" ] && [ "${GROUP_ID}" == "NEXT_AVAILABLE_ID" ]; then #[[ "${USER_ID}" =~ ^-?[0-9]+$ ]]
			if [ "${CREATE_GROUP}" == "1" ]; then groupadd "${GROUP_NAME}" 2> "/dev/null"; fi;
			useradd --create-home --uid "${USER_ID}" --home-dir "${DIR_USER_HOME}" --shell "${USER_SHELL}" "${USER_NAME}";

		elif [ "${USER_ID}" == "NEXT_AVAILABLE_ID" ] && [ "${GROUP_ID}" != "NEXT_AVAILABLE_ID" ]; then #[[ "${USER_ID}" =~ ^-?[0-9]+$ ]]
			if [ "${CREATE_GROUP}" == "1" ]; then groupadd --gid "${GROUP_ID}" "${GROUP_NAME}" 2> "/dev/null"; fi;
			useradd --create-home --gid "${GROUP_ID}" --home-dir "${DIR_USER_HOME}" --shell "${USER_SHELL}" "${USER_NAME}";

		elif [ "${USER_ID}" != "NEXT_AVAILABLE_ID" ] && [ "${GROUP_ID}" != "NEXT_AVAILABLE_ID" ]; then
			if [ "${CREATE_GROUP}" == "1" ]; then groupadd --gid "${GROUP_ID}" "${GROUP_NAME}" 2> "/dev/null"; fi;
			useradd --create-home --uid "${USER_ID}" --gid "${GROUP_ID}" --home-dir "${DIR_USER_HOME}" --shell "${USER_SHELL}" "${USER_NAME}";

		fi;

		if [ "${CREATE_USERSSH}" == "1" ] && [ ! -d "${DIR_USER_SSH}" ]; then
			# Create user's SSH directory "~/.ssh"
			mkdir "${DIR_USER_SSH}";
			chmod 0700 "${DIR_USER_SSH}";
			chown "${USER_ID}" "${DIR_USER_SSH}";
		fi;


		# Make user a sudoer (able to run as root using 'sudo' command)
		if [ "${ADD_USER_TO_SUDOERS}" == "1" ]; then

			SUDOER_FILEPATH="/etc/sudoers.d/${USER_NAME}";

			# Add user to the 'sudo' usergroup (sudoers)
			usermod --append --groups "sudo" "${USER_NAME}";

			if [ "${SUDO_REQUIRES_PASS}" == "0" ]; then

				# Choice 1/2: No password required for user to run 'sudo' commands
				echo "${USER_NAME} ALL=(ALL) NOPASSWD:ALL" > "${SUDOER_FILEPATH}";
				chmod 440 "${SUDOER_FILEPATH}";

			else

				# Choice 2/2: Require a password when user runs 'sudo' commands
				echo "${USER_NAME} ALL=(ALL) ALL" > "${SUDOER_FILEPATH}";
				chmod 440 "${SUDOER_FILEPATH}";

			fi;

			# Refer to "/etc/ssh/sshd_config" for more-advanced SSH config

		fi;


		if [ "${SET_USER_PASSWORD}" != "0" ]; then
			passwd "${USER_NAME}";
			#				[Enter password] > ENTER
			#			[Confirm password] > ENTER
		fi;
		
		exit 0;

	fi;

fi;
