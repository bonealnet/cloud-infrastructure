#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/add_user" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;

else
	# ------------------------------------------------------------
	#	   Set the username, ID, homedir, etc.
	# ------------------------------------------------------------

	# User Info
	while [ -z "${USER_NAME}" ]; do
		echo "";
		read -p " [ $(basename "${0}";) ]  Enter a Username:  " -t 60 -r;
		USER_NAME="${REPLY}";
		if [ -n "${USER_NAME}" ]; then
			break;
		fi;
	done;

	# USER_ID="${USER_ID:-NEXT_AVAILABLE_ID}";
	# GROUP_NAME="${GROUP_NAME:-${USER_NAME}}";
	# GROUP_ID="${GROUP_ID:-NEXT_AVAILABLE_ID}";
	USER_SHELL="${USER_SHELL:-/bin/bash}";

	# User Directory-Info
	DIR_USER_HOME="${DIR_USER_HOME:-/home/${USER_NAME}}";
	DIR_USER_SSH="${DIR_USER_SSH:-${DIR_USER_HOME}/.ssh}";
	
	CREATE_HOME="${CREATE_HOME:-1}";
	CREATE_HOME_SSH="${CREATE_HOME_SSH:-1}";

	# Options - Password
	SET_USER_PASSWORD="${SET_USER_PASSWORD:-0}";

	# Options - Sudo
	ADD_USER_TO_SUDOERS="${ADD_USER_TO_SUDOERS:-0}";
	SUDO_REQUIRES_PASS="${SUDO_REQUIRES_PASS:-0}";

	#	------------------------------------------------------------
	#	   Values below are based off of the above values
	# ------------------------------------------------------------

	if [ -z "${USER_NAME}" ]; then
		echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: \$USER_NAME is empty/unset";
		echo "$(date +'%Y-%m-%d %H:%M:%S') | Exiting...";
		exit 1;

	elif [[ -v USER_NAME ]] \
			&& [[ -v USER_ID ]] \
			&& [[ "${USER_ID}" =~ ^-?[0-9]+$ ]] \
			&& [ "$(id -u ${USER_ID} >/dev/null 2>&1; echo $?;)" == "0" ] \
			&& [ "$(id -un ${USER_ID})" != "${USER_NAME}" ]; then

		echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: User ID \"${USER_ID}\" is already taken by user \"$(id -un ${USER_ID})\"";
		echo "$(date +'%Y-%m-%d %H:%M:%S') | Exiting...";
		exit 1;

	elif [[ -v GROUP_NAME ]] \
			&& [[ -v GROUP_ID ]] \
			&& [[ "${GROUP_ID}" =~ ^-?[0-9]+$ ]] \
			&& [ "$(id -gn ${GROUP_ID} >/dev/null 2>&1; echo $?;)" == "0" ] \
			&& [ "$(id -gn ${GROUP_ID})" != "${GROUP_NAME}" ]; then

		echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Group-ID \"${GROUP_ID}\" resolved to Group Name \"$(id -gn ${GROUP_ID})\", which is NOT equal to the declared Group-Name value of \"${GROUP_NAME}\"";
		echo "$(date +'%Y-%m-%d %H:%M:%S') | Exiting...";
		exit 1;

	elif [ "${CREATE_HOME}" == "1" ] && [ -d "${DIR_USER_HOME}" ]; then

		echo "Home Directory already exists: \"${DIR_USER_HOME}\".";
		echo "If you still want to use this directory, set \$CREATE_HOME to \"0\" and re-run this script.";
		exit 1;

	else

		# ------------------------------------------------------------
		# GROUP-CREATION
		if [[ -v GROUP_NAME ]] && [ "$(id -g ${GROUP_NAME} >/dev/null 2>&1; echo $?;)" == "0" ]; then
			GARGS="";

			# Group-ID
			if [ -n "${GROUP_ID}" ]; then
				GARGS="${GARGS} --gid \"${GROUP_ID}\"";
			fi;

			# Trim whitespace
			GARGS="$(echo -e "${GARGS}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')";

			# Create the Group
			groupadd "${GARGS}" "${GROUP_NAME}";
			GROUP_ID=$(id -gn "${GROUP_NAME}");
		fi;

		# ------------------------------------------------------------
		# USER-CREATION
		UARGS="";

		# Create Home-Directory (Y/N)
		if [[ -v CREATE_HOME ]] && [ "${CREATE_HOME}" == "1" ]; then
			UARGS="${UARGS} --create-home";
		fi;

		# User Home-Directory
		if [[ -v DIR_USER_HOME ]] && [ -n "${DIR_USER_HOME}" ]; then
			UARGS="${UARGS} --home-dir \"${DIR_USER_HOME}\"";
		fi;

		# User ID
		if [[ -v USER_ID ]] && [[ "${USER_ID}" =~ ^-?[0-9]+$ ]]; then
			UARGS="${UARGS} --uid \"${USER_ID}\"";
		fi;

		# User Default Group (Group-ID/Group-Name)
		if [[ -v GROUP_ID ]] && [[ "${GROUP_ID}" =~ ^-?[0-9]+$ ]]; then
			UARGS="${UARGS} --groups \"${GROUP_ID}\"";
		elif [[ -v GROUP_NAME ]] && [[ -n "${GROUP_NAME}" ]]; then
			UARGS="${UARGS} --groups \"${GROUP_NAME}\""; fi;
		fi;

		# User Shell
		if [[ -v USER_SHELL ]] && [ -n "${USER_SHELL}" ]; then
			UARGS="${UARGS} --shell \"${USER_SHELL}\"";
		fi;

		# Trim whitespace
		UARGS="$(echo -e "${UARGS}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')";

		# Create the User
		useradd "${UARGS}" "${USER_NAME}";

		if [ "${CREATE_HOME_SSH}" == "1" ] && [ ! -d "${DIR_USER_SSH}" ]; then
			# Create user's SSH directory "~/.ssh"
			mkdir "${DIR_USER_SSH}";
			chmod 0700 "${DIR_USER_SSH}";
			chown "${USER_ID}" "${DIR_USER_SSH}";
		fi;

		# Make user a sudoer (able to run as root using 'sudo' command)
		if [ "${ADD_USER_TO_SUDOERS}" == "1" ]; then

			# Add user to the "sudo" usergroup (if not already in it)
			SUDO_GROUP="sudo";
			if [ $(/usr/local/sbin/is_user_in_group "${USER_NAME}" "${SUDO_GROUP}"; ERROR_LEVEL=$?; echo ${ERROR_LEVEL};) -ne 0 ]; then
				usermod --append --groups "${SUDO_GROUP}" "${USER_NAME}";
			fi;

			# Add user-named-file into the sudoer.d directory to strengthen logins (and get away from typed passwords)
			SUDOER_FILEPATH="/etc/sudoers.d/${USER_NAME}";
			if [ "${SUDO_REQUIRES_PASS}" == "0" ]; then
				# Choice 1/2: No password required for user to run 'sudo' commands
				echo "${USER_NAME} ALL=(ALL) NOPASSWD:ALL" > "${SUDOER_FILEPATH}";
				chmod 440 "${SUDOER_FILEPATH}";
			else
				# Choice 2/2: Require a password when user runs 'sudo' commands
				echo "${USER_NAME} ALL=(ALL) ALL" > "${SUDOER_FILEPATH}";
				chmod 440 "${SUDOER_FILEPATH}";
			fi;

			# Refer to "/etc/ssh/sshd_config" for more-advanced SSH config

		fi;


		if [ "${SET_USER_PASSWORD}" != "0" ]; then
			passwd "${USER_NAME}";
			#				[Enter password] > ENTER
			#			[Confirm password] > ENTER
		fi;
		exit 0;

	fi;

fi;
