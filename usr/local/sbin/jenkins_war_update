#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/jenkins_war_update" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then

	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;

else


	# Backup the current Jenkins main-executable (jenkins.war)
	WAR_DIR="/usr/share/jenkins"; # Base-directory for Jenkins ".war" file
	JENKINS_RUNTIME_SYSTEM="${WAR_DIR}/jenkins.war";
	JENKINS_RUNTIME_BACKUP="${JENKINS_RUNTIME_SYSTEM}.$(date +'%Y%m%d_%H%M%S').bak";
	JENKINS_RUNTIME_DOWNLOADED="${JENKINS_RUNTIME_SYSTEM}.$(date +'%Y%m%d_%H%M%S').wget";

	# Download an updated version of the Jenkins main-executable (jenkins.war)
	echo "";
	echo "$(date +'%D  %r')   Downloading Most-Recent Version of Jenkins...";
	WGET_LOGFILE="${LOGFILE}.wget";
	if [ -f "${WGET_LOGFILE}" ]; then
		rm -f "${WGET_LOGFILE}";
	fi;
	DOWNLOAD_URL="https://updates.jenkins-ci.org/latest/jenkins.war";
	wget --quiet --server-response --output-document="${JENKINS_RUNTIME_DOWNLOADED}" --output-file="${WGET_LOGFILE}" "${DOWNLOAD_URL}";

	# Log the relevant info from the version which was just downloaded
	printf "$(date +'%D  %r')   " && cat "${WGET_LOGFILE}" | grep "Location: ${DOWNLOAD_URL}";
	printf "$(date +'%D  %r')   " && cat "${WGET_LOGFILE}" | grep "Last-Modified: ";
	rm -f "${WGET_LOGFILE}";

	# Verify that download actually downloaded more than 0 bytes
	DOWNLOAD_FILESIZE=$(du -sh "${JENKINS_RUNTIME_DOWNLOADED}" | awk '{print $1}');
	echo "$(date +'%D  %r')   DOWNLOAD_FILESIZE = \"${DOWNLOAD_FILESIZE}\"";
	if [[ ! -n "${DOWNLOAD_FILESIZE}" ]] || [[ "${DOWNLOAD_FILESIZE}" == "" ]] || [[ "${DOWNLOAD_FILESIZE}" == "0" ]]; then
		echo "";
		echo "$(date +'%D  %r')   Empty runtime detected: \"${JENKINS_RUNTIME_SYSTEM}\"";
		echo "$(date +'%D  %r')   Reverting to previous runtime: \"${JENKINS_RUNTIME_BACKUP}\"";

	else
		# Compare Jenkins Versions
		JENKINS_VERSION_SYSTEM=$(java -jar "${JENKINS_RUNTIME_SYSTEM}" --version);
		JENKINS_VERSION_DOWNLOADED=$(java -jar "${JENKINS_RUNTIME_DOWNLOADED}" --version);

		echo "";
		echo "$(date +'%D  %r')   JENKINS_VERSION_SYSTEM = \"${JENKINS_VERSION_SYSTEM}\"";
		echo "$(date +'%D  %r')   JENKINS_VERSION_DOWNLOADED = \"${JENKINS_VERSION_DOWNLOADED}\"";

		if [ "${JENKINS_VERSION_DOWNLOADED}" == "2.185" ]; then

			echo "";
			echo "$(date +'%D  %r')   Skipping downloaded Jenkins v2.185 (has a bug in its java ssh-clients which breaks connections to nodes)";

		elif [ "${JENKINS_VERSION_SYSTEM}" == "${JENKINS_VERSION_DOWNLOADED}" ]; then

			echo "";
			echo "$(date +'%D  %r')   No update to jenkins version number detected (remained constant @ v${JENKINS_VERSION_SYSTEM})";

		else

			# Stop the Jenkins-Service while we update
			echo "";
			echo "$(date +'%D  %r')   Calling [ systemctl stop jenkins; ]...";
			systemctl stop jenkins;

			# Backup the current Jenkins runtime - Move the newly downloaded Jenkins runtime into its place
			mv --verbose "${JENKINS_RUNTIME_SYSTEM}" "${JENKINS_RUNTIME_SYSTEM}.v${JENKINS_VERSION_SYSTEM}";
			mv --verbose "${JENKINS_RUNTIME_DOWNLOADED}" "${JENKINS_RUNTIME_SYSTEM}";

			# Start the Jenkins-Service now that we're finished updating
			echo "";
			echo "$(date +'%D  %r')   Calling [ systemctl start jenkins; ]...";
			systemctl start jenkins;

			# Reload NGINX
			if [ -f "$(which reload_nginx)" ]; then
				sudo reload_nginx;
			elif [ -n "$(which nginx)" ]; then
				echo "";
				echo "$(date +'%D  %r')   Reloading NGINX Service...";
				sudo nginx -t && sudo sleep 1 && sudo service nginx reload;
			else
				echo "";
				echo "$(date +'%D  %r')   Skipping NGINX service-restart (which nginx returned nothing)";
			fi;

		fi;

	fi;

	# Exit Gracefully
	echo "";
	echo "$(date +'%D  %r')   Finished ${0}";
	exit 0;

fi;